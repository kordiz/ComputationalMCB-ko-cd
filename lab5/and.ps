%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.9
%%CreationDate: Tue Sep 25 20:56:09 2018
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
GGGCGACCCUGAUGAGCUUGAGUUUAGUAUUUACAGCUCCAUACAUGAGGUGUUAUCCCUAUGCAAGUUCGAUCAGGCGAAACGGUGAAAGCCGUAGGUUGCCC\
) def
/coor [
[71.45814514 221.65269470]
[71.45814514 206.65269470]
[71.45814514 191.65269470]
[71.45814514 176.65269470]
[71.45814514 161.65269470]
[71.45814514 146.65269470]
[71.45814514 131.65269470]
[71.45814514 116.65269470]
[67.03681946 102.31909943]
[58.58701706 89.92551422]
[50.13721466 77.53193665]
[41.68741608 65.13835144]
[33.23761368 52.74477386]
[24.60335922 40.47898102]
[15.78658009 28.34372711]
[6.96980095 16.20847321]
[-1.84697783 4.07321739]
[-10.66375637 -8.06203747]
[-19.48053551 -20.19729233]
[-28.29731369 -32.33254623]
[-40.37271881 -31.88370514]
[-51.02151489 -37.33458710]
[-57.58457565 -47.19139862]
[-58.48812103 -58.87748718]
[-53.61968613 -69.40646362]
[-61.69494247 -82.04727936]
[-69.77020264 -94.68809509]
[-84.89453888 -92.95149231]
[-99.21469879 -97.93346405]
[-109.90795898 -108.59528351]
[-114.89119720 -122.78430176]
[-113.22654724 -137.66847229]
[-105.29741669 -150.30152893]
[-113.37268066 -162.94235229]
[-121.44793701 -175.58316040]
[-135.39765930 -183.04747009]
[-135.72900391 -197.93840027]
[-143.80426025 -210.57920837]
[-151.87951660 -223.22003174]
[-167.40820312 -225.06225586]
[-178.08198547 -236.49049377]
[-178.86102295 -252.10865784]
[-169.37747192 -264.54232788]
[-154.10919189 -267.92071533]
[-140.26538086 -260.64865112]
[-134.38267517 -246.15977478]
[-139.23870850 -231.29528809]
[-131.16345215 -218.65446472]
[-123.08818817 -206.01365662]
[-109.71607208 -199.45349121]
[-108.80712128 -183.65841675]
[-100.73186493 -171.01760864]
[-92.65660095 -158.37680054]
[-77.86081696 -160.26095581]
[-63.65578842 -155.51472473]
[-52.87599564 -145.02868652]
[-47.69689560 -130.84428406]
[-49.19604111 -115.75656128]
[-57.12938690 -102.76335144]
[-49.05413055 -90.12254333]
[-40.97887039 -77.48172760]
[-22.99958992 -74.75314331]
[-12.40720081 -59.58570099]
[-16.16205978 -41.14932632]
[-7.34528065 -29.01407051]
[1.47149837 -16.87881660]
[10.28827667 -4.74356127]
[19.10505676 7.39169359]
[27.92183495 19.52694893]
[36.73861313 31.66220284]
[43.32415771 35.28263855]
[45.63119507 44.29497147]
[54.08099747 56.68855286]
[62.53079605 69.08213806]
[70.98059845 81.47571564]
[79.43039703 93.86930084]
[85.31611633 85.18190002]
[94.39038086 80.53337860]
[104.28418732 80.81632233]
[112.56377411 85.67533875]
[117.32933807 93.66429138]
[117.64887238 102.66329193]
[130.16748047 110.92674255]
[142.68606567 119.19020081]
[155.20466614 127.45365906]
[167.72326660 135.71711731]
[184.11651611 136.15719604]
[191.69306946 150.70118713]
[182.65882874 164.38748169]
[166.30743408 163.13677979]
[159.45980835 148.23570251]
[146.94122314 139.97225952]
[134.42262268 131.70880127]
[121.90402222 123.44534302]
[109.38542175 115.18189240]
[98.73265076 119.61534119]
[86.45814514 116.65269470]
[86.45814514 131.65269470]
[86.45814514 146.65269470]
[86.45814514 161.65269470]
[86.45814514 176.65269470]
[86.45814514 191.65269470]
[86.45814514 206.65269470]
[86.45814514 221.65269470]
] def
/pairs [
[1 104]
[2 103]
[3 102]
[4 101]
[5 100]
[6 99]
[7 98]
[8 97]
[9 76]
[10 75]
[11 74]
[12 73]
[13 72]
[14 70]
[15 69]
[16 68]
[17 67]
[18 66]
[19 65]
[20 64]
[25 61]
[26 60]
[27 59]
[33 53]
[34 52]
[35 51]
[37 49]
[38 48]
[39 47]
[82 95]
[83 94]
[84 93]
[85 92]
[86 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF
